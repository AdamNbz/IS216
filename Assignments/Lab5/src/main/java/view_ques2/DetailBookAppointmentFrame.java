package view_ques2;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/*
 *
 *  author: CacAnhDaDen (nbzzz, Hinno, _qnk_)
 *
 */

public class DetailBookAppointmentFrame extends javax.swing.JFrame {
    private MainFrame mf;
    int DEBUG = 1;
    /**
     * Creates new form DetailBookAppointment
     */
    public DetailBookAppointmentFrame(MainFrame mf) {
        this.mf = mf;
        try {
            String osName = System.getProperty("os.name").toLowerCase();
    
            if (osName.contains("linux")) {
                // Sử dụng GTK trên Linux
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("GTK+".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } else if (osName.contains("windows")) {
                // Sử dụng giao diện Windows trên Windows
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Windows".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DetailBookAppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DetailBookAppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DetailBookAppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DetailBookAppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();
        loadingBSiName();
        loadDSDVTable();
        eventlistenerfunction(DSDVTable);
        this.setFrameInCenter();
        this.setVisible(true);
    }
    
    public void setFrameInCenter() {
        final Toolkit toolkit = Toolkit.getDefaultToolkit();
        final Dimension screenSize = toolkit.getScreenSize();
        final int x = (screenSize.width - this.getWidth()) / 2;
        final int y = (screenSize.height - this.getHeight()) / 2;
        this.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UpperLayer = new javax.swing.JPanel();
        BSiPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BSiInput = new javax.swing.JComboBox<>();
        NgKhamPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        NgKhamInput = new com.toedter.calendar.JDateChooser();
        TenBNPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        TenBNInput = new javax.swing.JComboBox<>();
        YCauKhamPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        YCauKhamInput = new javax.swing.JTextField();
        UpperMiddleLayer = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        KLuanInput = new javax.swing.JTextField();
        LowerMiddleLayer = new javax.swing.JPanel();
        DSDVPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        DSDVScrollPanel = new javax.swing.JScrollPane();
        DSDVTable = new javax.swing.JTable();
        DSDVLCPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        DSDVLCScrollPanel = new javax.swing.JScrollPane();
        DSDVLCTable = new javax.swing.JTable();
        LowerLayer = new javax.swing.JPanel();
        ThemButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        UpperLayer.setLayout(new java.awt.GridLayout(2, 2, 5, 5));

        jLabel1.setText("Bác sĩ khám");
        jLabel1.setPreferredSize(new java.awt.Dimension(140, 48));

        BSiInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên bác sĩ" }));
        BSiInput.setPreferredSize(new java.awt.Dimension(306, 48));

        javax.swing.GroupLayout BSiPanelLayout = new javax.swing.GroupLayout(BSiPanel);
        BSiPanel.setLayout(BSiPanelLayout);
        BSiPanelLayout.setHorizontalGroup(
            BSiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BSiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BSiInput, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        BSiPanelLayout.setVerticalGroup(
            BSiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BSiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BSiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BSiInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        UpperLayer.add(BSiPanel);

        jLabel3.setText("Ngày khám");
        jLabel3.setPreferredSize(new java.awt.Dimension(140, 48));

        NgKhamInput.setPreferredSize(new java.awt.Dimension(306, 48));
        NgKhamInput.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                NgKhamInputPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout NgKhamPanelLayout = new javax.swing.GroupLayout(NgKhamPanel);
        NgKhamPanel.setLayout(NgKhamPanelLayout);
        NgKhamPanelLayout.setHorizontalGroup(
            NgKhamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NgKhamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NgKhamInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        NgKhamPanelLayout.setVerticalGroup(
            NgKhamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NgKhamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NgKhamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NgKhamInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        UpperLayer.add(NgKhamPanel);

        jLabel2.setText("Tên bệnh nhân");
        jLabel2.setPreferredSize(new java.awt.Dimension(140, 48));

        TenBNInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên bệnh nhân" }));
        TenBNInput.setPreferredSize(new java.awt.Dimension(306, 48));
        TenBNInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TenBNInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TenBNPanelLayout = new javax.swing.GroupLayout(TenBNPanel);
        TenBNPanel.setLayout(TenBNPanelLayout);
        TenBNPanelLayout.setHorizontalGroup(
            TenBNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TenBNPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TenBNInput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        TenBNPanelLayout.setVerticalGroup(
            TenBNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TenBNPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TenBNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TenBNInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        UpperLayer.add(TenBNPanel);

        jLabel4.setText("Yêu cầu khám");
        jLabel4.setPreferredSize(new java.awt.Dimension(140, 48));

        YCauKhamInput.setText("Yêu cầu khám");
        YCauKhamInput.setEnabled(false);
        YCauKhamInput.setPreferredSize(new java.awt.Dimension(306, 48));

        javax.swing.GroupLayout YCauKhamPanelLayout = new javax.swing.GroupLayout(YCauKhamPanel);
        YCauKhamPanel.setLayout(YCauKhamPanelLayout);
        YCauKhamPanelLayout.setHorizontalGroup(
            YCauKhamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(YCauKhamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(YCauKhamInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        YCauKhamPanelLayout.setVerticalGroup(
            YCauKhamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(YCauKhamPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(YCauKhamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(YCauKhamInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        UpperLayer.add(YCauKhamPanel);

        jLabel5.setText("Kết luận");
        jLabel5.setPreferredSize(new java.awt.Dimension(140, 48));

        KLuanInput.setText("Kết luận");

        javax.swing.GroupLayout UpperMiddleLayerLayout = new javax.swing.GroupLayout(UpperMiddleLayer);
        UpperMiddleLayer.setLayout(UpperMiddleLayerLayout);
        UpperMiddleLayerLayout.setHorizontalGroup(
            UpperMiddleLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpperMiddleLayerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KLuanInput)
                .addContainerGap())
        );
        UpperMiddleLayerLayout.setVerticalGroup(
            UpperMiddleLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpperMiddleLayerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UpperMiddleLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(KLuanInput))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LowerMiddleLayer.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jLabel6.setText("Danh sách dịch vụ");

        DSDVTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Tên dịch vụ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DSDVTable.setColumnSelectionAllowed(true);
        DSDVScrollPanel.setViewportView(DSDVTable);
        DSDVTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (DSDVTable.getColumnModel().getColumnCount() > 0) {
            DSDVTable.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout DSDVPanelLayout = new javax.swing.GroupLayout(DSDVPanel);
        DSDVPanel.setLayout(DSDVPanelLayout);
        DSDVPanelLayout.setHorizontalGroup(
            DSDVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DSDVPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DSDVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DSDVScrollPanel))
                .addContainerGap())
        );
        DSDVPanelLayout.setVerticalGroup(
            DSDVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DSDVPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DSDVScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addContainerGap())
        );

        LowerMiddleLayer.add(DSDVPanel);

        jLabel7.setText("Danh sách dịch vụ bác sĩ chọn");

        DSDVLCTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên dịch vụ", "Số lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DSDVLCTable.setColumnSelectionAllowed(true);
        DSDVLCScrollPanel.setViewportView(DSDVLCTable);
        DSDVLCTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (DSDVLCTable.getColumnModel().getColumnCount() > 0) {
            DSDVLCTable.getColumnModel().getColumn(0).setResizable(false);
            DSDVLCTable.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout DSDVLCPanelLayout = new javax.swing.GroupLayout(DSDVLCPanel);
        DSDVLCPanel.setLayout(DSDVLCPanelLayout);
        DSDVLCPanelLayout.setHorizontalGroup(
            DSDVLCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DSDVLCPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DSDVLCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DSDVLCScrollPanel))
                .addContainerGap())
        );
        DSDVLCPanelLayout.setVerticalGroup(
            DSDVLCPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DSDVLCPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DSDVLCScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addContainerGap())
        );

        LowerMiddleLayer.add(DSDVLCPanel);

        ThemButton.setText("Thêm");
        ThemButton.setPreferredSize(new java.awt.Dimension(150, 50));
        ThemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThemButtonActionPerformed(evt);
            }
        });
        LowerLayer.add(ThemButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LowerLayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UpperLayer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UpperMiddleLayer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LowerMiddleLayer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UpperLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UpperMiddleLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LowerMiddleLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LowerLayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Connection connect() {
        // Connection parameter
        String dbURL = "jdbc:mysql://localhost:3306/QLKB";
        String driver = "com.mysql.jdbc.Driver";
        Connection con = null;
        
        // Catching error in connection
        try {
            // Class loader
            Class.forName(driver);
            
            // Connection
            con = DriverManager.getConnection(dbURL, "root", "181105");

            // Debug 
            if (con != null) {
                if (DEBUG == 1) {
                    System.out.println("Kết nối đến cơ sử dữ liệu thành công");
                }
            }
        } catch(SQLException se) { 
            // SQL Exception
            System.out.println(se.getMessage());
        } catch (ClassNotFoundException ex) { 
            // Class Exception
            Logger.getLogger(DetailBookAppointmentFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Return connection
        if (con != null) {
            return con;
        } else {
            return null;
        }
    }
    
    private void loadingBSiName() {
        ResultSet rs = null;
        List<String> list = new ArrayList<>();
        
        // Create connection
        Connection con = connect();
        
        if (con == null) {
            // Debug
            if (DEBUG == 1) {
                System.out.println("Không thể kết nối đến cơ sử dữ liệu");
            }   
        } else {
            // Query
            String query = "SELECT BACSI.TENBS FROM BACSI";

            // Catching error in query execution
            try {
                // Load parameter in to query
                PreparedStatement ps = con.prepareStatement(query);

                // Execute and return boolean value
                rs = ps.executeQuery();
                
                if (rs.isBeforeFirst()) {
                    
                    
                    while (rs.next() == true) {
                        list.add(rs.getString("TENBS"));
                    }
                    
                    if (DEBUG == 1) {
                        for (String bsi: list) {
                            System.out.println(bsi);
                        }
                    }
                    
                    for (String bsi: list) {
                        BSiInput.addItem(bsi);
                    }   
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Sucess");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Không tải được danh sách bác sĩ", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Fail");
                    }
                }

                con.close();
            } catch (SQLException se) {
                // SQL Exception
                System.out.println(se.getMessage());
            }
        }
    }
    
    private void eventlistenerfunction(JTable DSDVTable) {
        DSDVTable.getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    if (!e.getValueIsAdjusting()) {
                        int row = DSDVTable.getSelectedRow();
                        int col = DSDVTable.getSelectedColumn();
                        Object obj = DSDVTable.getModel().getValueAt(row, col);
                        System.out.println(obj.toString());
                        if (obj.toString().contentEquals("") == true) {
                            
                        } else {
                            ((DefaultTableModel) DSDVLCTable.getModel()).setRowCount(DSDVLCTable.getModel().getRowCount() + 1);
                            DSDVLCTable.getModel().setValueAt(obj, DSDVLCTable.getModel().getRowCount() - 1, col);
                            DSDVTable.getModel().setValueAt("", row, col);
                        }
                    }
                }
            }
        );
    }
    
    private void loadTenBN(Date date) {
        ResultSet rs = null;
        List<String> list = new ArrayList<>();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        
        // Create connection
        Connection con = connect();
        
        if (con == null) {
            // Debug
            if (DEBUG == 1) {
                System.out.println("Không thể kết nối đến cơ sử dữ liệu");
            }   
        } else {
            // Query
            String query = "SELECT BENHNHAN.TENBN FROM KHAMBENH "
                    + "JOIN BENHNHAN ON KHAMBENH.MABN = BENHNHAN.MABN "
                    + "JOIN BACSI ON KHAMBENH.MABS = BACSI.MABS "
                    + "WHERE BACSI.TENBS = ? AND KHAMBENH.NGAYKHAM = ? AND KHAMBENH.THANHTOAN = false";

            // Catching error in query execution
            try {
                // Load parameter in to query
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, BSiInput.getSelectedItem().toString());
                ps.setString(2, formatter.format(date));

                // Execute and return boolean value
                rs = ps.executeQuery();
                
                if (rs.isBeforeFirst()) {
                    TenBNInput.removeAllItems();
                    
                    while (rs.next() == true) {
                        list.add(rs.getString("TENBN"));
                    }
                    
                    if (DEBUG == 1) {
                        for (String TenBN: list) {
                            System.out.println(TenBN);
                        }
                    }
                    
                    
                    for (String bsi: list) {
                        TenBNInput.addItem(bsi);
                    }
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Sucess");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Không tải được danh sách tên bệnh nhân", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Fail");
                    }
                }

                con.close();
            } catch (SQLException se) {
                // SQL Exception
                System.out.println(se.getMessage());
                se.printStackTrace();
            }
        }
    }
    
    private void loadDSDVTable() {
        ResultSet rs = null;
        List<String> list = new ArrayList<>();
        
        // Create connection
        Connection con = connect();
        
        if (con == null) {
            // Debug
            if (DEBUG == 1) {
                System.out.println("Không thể kết nối đến cơ sử dữ liệu");
            }   
        } else {
            // Query
            String query = "SELECT DICHVU.TENDV FROM DICHVU";

            // Catching error in query execution
            try {
                // Load parameter in to query
                PreparedStatement ps = con.prepareStatement(query);

                // Execute and return boolean value
                rs = ps.executeQuery();
                
                if (rs.isBeforeFirst()) {
                    
                    while (rs.next() == true) {
                        list.add(rs.getString("TENDV"));
                    }
                    
                    if (DEBUG == 1) {
                        for (String bsi: list) {
                            System.out.println(bsi);
                        }
                    }
                    
                    DefaultTableModel model = new DefaultTableModel();
                    model.addColumn("Tên dịch vụ");
                    
                    for (String dvu: list) {
                        model.addRow(new Object[]{dvu});
                    }
                    
                    DSDVTable.setModel(model);
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Sucess");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Không tải được danh sách dịch vụ", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Fail");
                    }
                }

                con.close();
            } catch (SQLException se) {
                // SQL Exception
                System.out.println(se.getMessage());
            }
        }
    }
    
    private void loadYCKham() {
        String TenBN = TenBNInput.getSelectedItem().toString();
        String TenBS = BSiInput.getSelectedItem().toString();
        NgKhamInput.setDateFormatString("y-M-d");
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        Date NgKham = NgKhamInput.getDate();
        ResultSet rs = null;
        List<String> list = new ArrayList<>();
        
        // Create connection
        Connection con = connect();
        
        if (con == null) {
            // Debug
            if (DEBUG == 1) {
                System.out.println("Không thể kết nối đến cơ sử dữ liệu");
            }   
        } else {
            // Query
            String query = "SELECT KHAMBENH.YEUCAUKHAM "
                    + "FROM KHAMBENH "
                    + "JOIN BENHNHAN "
                    + "ON KHAMBENH.MABN = BENHNHAN.MABN "
                    + "JOIN BACSI "
                    + "ON KHAMBENH.MABS = BACSI.MABS "
                    + "WHERE BENHNHAN.TENBN = ? "
                    + "AND BACSI.TENBS = ? "
                    + "AND KHAMBENH.NGAYKHAM = ?";

            // Catching error in query execution
            try {
                // Load parameter in to query
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, TenBN);
                ps.setString(2, TenBS);
                ps.setString(3, formatter.format(NgKham));

                // Execute and return boolean value
                rs = ps.executeQuery();
                
                if (rs.isBeforeFirst()) {
                    
                    while (rs.next() == true) {
                        list.add(rs.getString("YEUCAUKHAM"));
                    }
                    
                    if (DEBUG == 1) {
                        for (String dvu: list) {
                            System.out.println(dvu);
                        }
                    }
                    
                    for (String dvu: list) {
                        YCauKhamInput.setText(dvu);
                    }
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Sucess");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Không tải được yêu cầu khám", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Fail");
                    }
                }

                con.close();
            } catch (SQLException se) {
                // SQL Exception
                System.out.println(se.getMessage());
            }
        }
    }
    
    private void ThemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThemButtonActionPerformed
        String TenBN = TenBNInput.getSelectedItem().toString();
        String TenBS = BSiInput.getSelectedItem().toString();
        String YCKham = YCauKhamInput.getText();
        NgKhamInput.setDateFormatString("y-M-d");
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        Date NgKham = NgKhamInput.getDate();
        String KLuan = KLuanInput.getText();
        Map<String, Integer> mp = new HashMap<>();
        String MaDV = null;
        String TenDV = null;
        int SL = 0;
        
        ((DefaultTableModel) DSDVLCTable.getModel()).setRowCount(DSDVLCTable.getModel().getRowCount() + 1);
        
        if (DEBUG == 1) {
            System.out.println(DSDVLCTable.getRowCount());
                for (int i = 0; i < DSDVLCTable.getRowCount(); i++) {
                System.out.println(DSDVLCTable.getValueAt(i, 0));
                System.out.println(DSDVLCTable.getValueAt(i, 1));
            }   
        }
        
        // Create connection
        Connection con = connect();
        
        for (int i = 0; i < DSDVLCTable.getRowCount(); i++) {
            if (DSDVLCTable.getValueAt(i, 0) == null || DSDVLCTable.getValueAt(i, 1) == null) {
                continue;
            }
                  
            ResultSet rs = null;
            List<String> list = new ArrayList<>();
            String query = "SELECT DICHVU.MADV "
                    + "FROM DICHVU "
                    + "WHERE DICHVU.TENDV = ?";
            TenDV = (String) DSDVLCTable.getValueAt(i, 0);
            // Catching error in query execution
            try {
                // Load parameter in to query
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, TenDV);

                // Execute and return boolean value
                rs = ps.executeQuery();
                if (rs.isBeforeFirst()) {
                    
                    while (rs.next() == true) {
                        list.add(rs.getString("MADV"));
                    }
                    
                    if (DEBUG == 1) {
                        for (String madv: list) {
                            System.out.println(madv);
                        }
                    }
                    
                    for (String madv: list) {
                        MaDV = madv;
                    }
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Sucess");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Không tải được mã dịch vụ", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Fail");
                    }
                }
            } catch (SQLException se) {
                // SQL Exception
                System.out.println(se.getMessage());
            }
            SL = Integer.parseInt((String) DSDVLCTable.getValueAt(i, 1));
            mp.putIfAbsent(MaDV, SL);
        }
        
        if (DEBUG == 1) {
            System.out.println(TenBN);
            System.out.println(TenBS);
            System.out.println(YCKham);
            System.out.println(formatter.format(NgKham));
            System.out.println(KLuan);
            mp.forEach((k, v) -> System.out.println(k + " | " + v));
        }
        
        
        
        if (con == null) {
            // Debug
            if (DEBUG == 1) {
                System.out.println("Không thể kết nối đến cơ sử dữ liệu");
            }   
        } else {
            String query = "UPDATE KHAMBENH "
                    + "JOIN BENHNHAN "
                    + "ON KHAMBENH.MABN = BENHNHAN.MABN "
                    + "JOIN BACSI "
                    + "ON KHAMBENH.MABS = BACSI.MABS "
                    + "SET KETLUAN = ? "
                    + "WHERE BENHNHAN.TENBN = ? "
                    + "AND BACSI.TENBS = ? "
                    + "AND KHAMBENH.NGAYKHAM = ?";

            // Catching error in query execution
            try {
                // Load parameter in to query
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, KLuan);
                ps.setString(2, TenBN);
                ps.setString(3, TenBS);
                ps.setString(4, formatter.format(NgKham));

                // Execute and return boolean value
                ps.executeUpdate();
            } catch (SQLException se) {
                // SQL Exception
                System.out.println(se.getMessage());
            }
            
            ResultSet rs = null;
            List<String> list = new ArrayList<>();
            String MaKB = null;
            query = "SELECT KHAMBENH.MAKB " 
                    + "FROM KHAMBENH " 
                    + "JOIN BENHNHAN " 
                    + "ON KHAMBENH.MABN = BENHNHAN.MABN " 
                    + "JOIN BACSI " 
                    + "ON KHAMBENH.MABS = BACSI.MABS " 
                    + "WHERE BENHNHAN.TENBN = ? " 
                    + "AND BACSI.TENBS = ? "
                    + "AND KHAMBENH.YEUCAUKHAM = ? "
                    + "AND KHAMBENH.NGAYKHAM = ? "
                    + "AND KHAMBENH.KETLUAN = ?";
            // Catching error in query execution
            try {
                // Load parameter in to query
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, TenBN);
                ps.setString(2, TenBS);
                ps.setString(3, YCKham);
                ps.setString(4, formatter.format(NgKham));
                ps.setString(5, KLuan);

                // Execute and return boolean value
                rs = ps.executeQuery();
                if (rs.isBeforeFirst()) {
                    
                    while (rs.next() == true) {
                        list.add(rs.getString("MAKB"));
                    }
                    
                    if (DEBUG == 1) {
                        for (String makb: list) {
                            System.out.println(makb);
                        }
                    }
                    
                    for (String makb: list) {
                        MaKB = makb;
                    }
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Sucess");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Không tải được mã khám bệnh", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Fail");
                    }
                }
            } catch (SQLException se) {
                // SQL Exception
                System.out.println(se.getMessage());
            }
            
            for (Map.Entry<String, Integer> entry : mp.entrySet()) {
                MaDV = entry.getKey();
                SL = entry.getValue();
                MaKB = MaKB;
                
                query = "INSERT INTO THUPHI VALUE (?, ?, ?, 0)";
                // Catching error in query execution
                try {
                    // Load parameter in to query
                    PreparedStatement ps = con.prepareStatement(query);
                    ps.setString(1, MaKB);
                    ps.setString(2, MaDV);
                    ps.setString(3, String.valueOf(SL));

                    // Execute and return boolean value
                    ps.executeUpdate();
                } catch (SQLException se) {
                    // SQL Exception
                    System.out.println(se.getMessage());
                }
                
                query = "UPDATE THUPHI "
                        + "JOIN DICHVU "
                        + "ON THUPHI.MADV = DICHVU.MADV "
                        + "SET THUPHI.THANHTIEN = THUPHI.SOLUONG * DICHVU.DONGIA "
                        + "WHERE THUPHI.MAKB = ? "
                        + "AND THUPHI.MADV = ? ";
                // Catching error in query execution
                try {
                    // Load parameter in to query
                    PreparedStatement ps = con.prepareStatement(query);
                    ps.setString(1, MaKB);
                    ps.setString(2, MaDV);

                    // Execute and return boolean value
                    ps.executeUpdate();
                } catch (SQLException se) {
                    // SQL Exception
                    System.out.println(se.getMessage());
                }
            }
            try {
                con.close();
                
            } catch (SQLException se) {
                // SQL Exception
                System.out.println(se.getMessage());
            }
        }
        this.mf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ThemButtonActionPerformed

    private void TenBNInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TenBNInputActionPerformed
        if (TenBNInput.getSelectedItem() == null) {
            
        } else {
            loadYCKham();
        }
    }//GEN-LAST:event_TenBNInputActionPerformed

    private void NgKhamInputPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_NgKhamInputPropertyChange
        if ("date".equals(evt.getPropertyName())) {
            NgKhamInput.setDateFormatString("y-M-d");
            Date NgKham = NgKhamInput.getDate();
            loadTenBN(NgKham);
        } else {
            NgKhamInput.setDateFormatString("y-M-d");
            if (NgKhamInput.getDate() == null) {
                
            } else {
                Date NgKham = NgKhamInput.getDate();
                loadTenBN(NgKham);
            }
        }
    }//GEN-LAST:event_NgKhamInputPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BSiInput;
    private javax.swing.JPanel BSiPanel;
    private javax.swing.JPanel DSDVLCPanel;
    private javax.swing.JScrollPane DSDVLCScrollPanel;
    private javax.swing.JTable DSDVLCTable;
    private javax.swing.JPanel DSDVPanel;
    private javax.swing.JScrollPane DSDVScrollPanel;
    private javax.swing.JTable DSDVTable;
    private javax.swing.JTextField KLuanInput;
    private javax.swing.JPanel LowerLayer;
    private javax.swing.JPanel LowerMiddleLayer;
    private com.toedter.calendar.JDateChooser NgKhamInput;
    private javax.swing.JPanel NgKhamPanel;
    private javax.swing.JComboBox<String> TenBNInput;
    private javax.swing.JPanel TenBNPanel;
    private javax.swing.JButton ThemButton;
    private javax.swing.JPanel UpperLayer;
    private javax.swing.JPanel UpperMiddleLayer;
    private javax.swing.JTextField YCauKhamInput;
    private javax.swing.JPanel YCauKhamPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
