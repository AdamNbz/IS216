package view_ques2;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 *
 *  author: CacAnhDaDen (nbzzz, Hinno, _qnk_)
 *
 */

public class PaymentFrame extends javax.swing.JFrame {
    private MainFrame mf;
    int DEBUG = 1;
    /**
     * Creates new form Payment
     */
    public PaymentFrame(MainFrame mf) {
        this.mf = mf;
        try {
            String osName = System.getProperty("os.name").toLowerCase();
    
            if (osName.contains("linux")) {
                // Sử dụng GTK trên Linux
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("GTK+".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } else if (osName.contains("windows")) {
                // Sử dụng giao diện Windows trên Windows
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Windows".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaymentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaymentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaymentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaymentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();
        this.setFrameInCenter();
        this.setVisible(true);
    }
    
    public void setFrameInCenter() {
        final Toolkit toolkit = Toolkit.getDefaultToolkit();
        final Dimension screenSize = toolkit.getScreenSize();
        final int x = (screenSize.width - this.getWidth()) / 2;
        final int y = (screenSize.height - this.getHeight()) / 2;
        this.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UpperPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        MaBNInput = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        NgKhamInput = new com.toedter.calendar.JDateChooser();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        TenBNInput = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        YCKhamInput = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        KLInput = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        TongTienInput = new javax.swing.JTextField();
        MiddlePanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        PaidCheck = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        DSDVDKTable = new javax.swing.JTable();
        LowerPanel = new javax.swing.JPanel();
        ThanhToanButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        UpperPanel.setLayout(new java.awt.GridLayout(3, 2, 5, 5));

        jLabel1.setText("Mã bệnh nhân");
        jLabel1.setPreferredSize(new java.awt.Dimension(140, 48));

        MaBNInput.setText("Mã bệnh nhân");
        MaBNInput.setPreferredSize(new java.awt.Dimension(233, 48));
        MaBNInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaBNInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MaBNInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MaBNInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        UpperPanel.add(jPanel2);

        jLabel2.setText("Ngày khám");
        jLabel2.setPreferredSize(new java.awt.Dimension(140, 48));

        NgKhamInput.setPreferredSize(new java.awt.Dimension(233, 48));
        NgKhamInput.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                NgKhamInputPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NgKhamInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NgKhamInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        UpperPanel.add(jPanel3);

        jLabel3.setText("Tên bệnh nhân");
        jLabel3.setPreferredSize(new java.awt.Dimension(140, 48));

        TenBNInput.setText("Tên bệnh nhân");
        TenBNInput.setEnabled(false);
        TenBNInput.setPreferredSize(new java.awt.Dimension(233, 48));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TenBNInput, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TenBNInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        UpperPanel.add(jPanel4);

        jLabel4.setText("Yêu cầu khám");
        jLabel4.setPreferredSize(new java.awt.Dimension(140, 48));

        YCKhamInput.setText("Yêu cầu khám");
        YCKhamInput.setEnabled(false);
        YCKhamInput.setPreferredSize(new java.awt.Dimension(233, 48));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(YCKhamInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(YCKhamInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        UpperPanel.add(jPanel5);

        jLabel5.setText("Kết luận");
        jLabel5.setPreferredSize(new java.awt.Dimension(140, 48));

        KLInput.setText("Kết luận");
        KLInput.setEnabled(false);
        KLInput.setPreferredSize(new java.awt.Dimension(233, 48));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KLInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(KLInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        UpperPanel.add(jPanel6);

        jLabel6.setText("Tổng tiền");
        jLabel6.setPreferredSize(new java.awt.Dimension(140, 48));

        TongTienInput.setText("Tổng tiền");
        TongTienInput.setEnabled(false);
        TongTienInput.setPreferredSize(new java.awt.Dimension(233, 48));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TongTienInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TongTienInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        UpperPanel.add(jPanel7);

        jLabel7.setText("Danh sách dịch vụ đã khám");

        PaidCheck.setText("Đã thanh toán");
        PaidCheck.setEnabled(false);

        DSDVDKTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tên dịch vụ", "Số lượng", "Thành tiền"
            }
        ));
        jScrollPane1.setViewportView(DSDVDKTable);

        javax.swing.GroupLayout MiddlePanelLayout = new javax.swing.GroupLayout(MiddlePanel);
        MiddlePanel.setLayout(MiddlePanelLayout);
        MiddlePanelLayout.setHorizontalGroup(
            MiddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MiddlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MiddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(MiddlePanelLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PaidCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MiddlePanelLayout.setVerticalGroup(
            MiddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MiddlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MiddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PaidCheck, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ThanhToanButton.setText("Thanh toán");
        ThanhToanButton.setPreferredSize(new java.awt.Dimension(150, 50));
        ThanhToanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThanhToanButtonActionPerformed(evt);
            }
        });
        LowerPanel.add(ThanhToanButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UpperPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                    .addComponent(MiddlePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UpperPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MiddlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LowerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Connection connect() {
        // Connection parameter
        String dbURL = "jdbc:mysql://localhost:3306/QLKB";
        String driver = "com.mysql.jdbc.Driver";
        Connection con = null;
        
        // Catching error in connection
        try {
            // Class loader
            Class.forName(driver);
            
            // Connection
            con = DriverManager.getConnection(dbURL, "root", "181105");

            // Debug 
            if (con != null) {
                if (DEBUG == 1) {
                    System.out.println("Kết nối đến cơ sử dữ liệu thành công");
                }
            }
        } catch(SQLException se) { 
            // SQL Exception
            System.out.println(se.getMessage());
        } catch (ClassNotFoundException ex) { 
            // Class Exception
            Logger.getLogger(PaymentFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Return connection
        if (con != null) {
            return con;
        } else {
            return null;
        }
    }
    
    private void ThanhToanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThanhToanButtonActionPerformed
        if (PaidCheck.isSelected()) {
            ThanhToanButton.setEnabled(false);
        } else {
            String MaBN = MaBNInput.getText();
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            String NgKham = formatter.format(NgKhamInput.getDate()); 
            String YCKham = YCKhamInput.getText();
            String KetLuan = KLInput.getText();

            // Create connection
            Connection con = connect();
            if (con == null) {
                // Debug
                if (DEBUG == 1) {
                    System.out.println("Không thể kết nối đến cơ sử dữ liệu");
                }   
            } else {
                // Query
                boolean result = false;
                String query = "UPDATE KHAMBENH "
                        + "SET KHAMBENH.THANHTOAN = TRUE "
                        + "WHERE KHAMBENH.MABN = ? "
                        + "AND KHAMBENH.NGAYKHAM = ? "
                        + "AND KHAMBENH.YEUCAUKHAM = ? "
                        + "AND KHAMBENH.KETLUAN = ? ";

                // Catching error in query execution
                try {
                    // Load parameter in to query
                    PreparedStatement ps = con.prepareStatement(query);
                    ps.setString(1, MaBN);
                    ps.setString(2, NgKham);
                    ps.setString(3, YCKham);
                    ps.setString(4, KetLuan);

                    // Execute 
                    ps.executeUpdate();
                    result = true;
                    con.close();
                } catch (SQLException se) {
                    // SQL Exception
                    System.out.println(se.getMessage());
                }

                if (result == false) {
                    // Error display
                    JOptionPane.showMessageDialog(this, "Thanh toán không thành công", "Error", JOptionPane.ERROR_MESSAGE);

                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("No user found");
                    }
                } else {
                    // Success display
                    JOptionPane.showMessageDialog(this, "Thanh toán thành công", "Success", JOptionPane.INFORMATION_MESSAGE);

                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("User found");
                    }
                }
            }
        }
        this.mf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ThanhToanButtonActionPerformed

    private void MaBNInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaBNInputActionPerformed
        String MaBN = MaBNInput.getText();
        ResultSet rs = null;
        List<String> list = new ArrayList<>();
        
        // Create connection
        Connection con = connect();
        
        if (con == null) {
            // Debug
            if (DEBUG == 1) {
                System.out.println("Không thể kết nối đến cơ sử dữ liệu");
            }   
        } else {
            // Query
            String query = "SELECT BENHNHAN.TENBN FROM BENHNHAN WHERE BENHNHAN.MABN = ?";

            // Catching error in query execution
            try {
                // Load parameter in to query
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, MaBN);

                // Execute and return boolean value
                rs = ps.executeQuery();
                
                if (rs.isBeforeFirst()) {
                    
                    while (rs.next() == true) {
                        list.add(rs.getString("TENBN"));
                    }
                    
                    if (DEBUG == 1) {
                        for (String tenbn: list) {
                            System.out.println(tenbn);
                        }
                    }
                    
                    for (String tenbn: list) {
                        TenBNInput.setText(tenbn);
                    }
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Sucess");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Không tải được danh sách bác sĩ", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Fail");
                    }
                }

                con.close();
            } catch (SQLException se) {
                // SQL Exception
                System.out.println(se.getMessage());
            }
        }
    }//GEN-LAST:event_MaBNInputActionPerformed

    private void NgKhamInputPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_NgKhamInputPropertyChange
        // Kiểm tra xem sự kiện có phải là thay đổi ngày tháng hay không
        if ("date".equals(evt.getPropertyName())) {
            // Lấy ngày được chọn từ JDateChooser
            Date selectedDate = NgKhamInput.getDate();

            // Kiểm tra xem ngày có null hay không
            if (selectedDate != null) {
                PaidCheck.setSelected(false); 
                String MaBN = MaBNInput.getText();
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                String NgKham = formatter.format(selectedDate);
                String YCKham = null;
                String KetLuan = null;
                String TToan = null;
                Integer TongTien = 0;
                
                ResultSet rs = null;
                List<String> list = new ArrayList<>();
                // Create connection
                Connection con = connect();

                if (con == null) {
                    // Debug
                    if (DEBUG == 1) {
                        System.out.println("Không thể kết nối đến cơ sử dữ liệu");
                    }   
                } else {
                    // Query
                    String query = "SELECT KHAMBENH.YEUCAUKHAM, KHAMBENH.KETLUAN, KHAMBENH.THANHTOAN "
                            + "FROM KHAMBENH "
                            + "WHERE KHAMBENH.MABN = ? "
                            + "AND KHAMBENH.NGAYKHAM = ? ";
                    // Catching error in query execution
                    try {
                        // Load parameter in to query
                        PreparedStatement ps = con.prepareStatement(query);
                        ps.setString(1, MaBN);
                        ps.setString(2, NgKham);

                        // Execute and return boolean value
                        rs = ps.executeQuery();

                        if (rs.next()) {
                            YCKham = rs.getString("YEUCAUKHAM"); // Lấy giá trị từ cột YEUCAUKHAM
                            KetLuan = rs.getString("KETLUAN");   // Lấy giá trị từ cột KETLUAN
                            TToan = rs.getString("THANHTOAN");   // Lấy giá trị từ cột THANHTOAN

                            // Debug
                            if (DEBUG == 1) {
                                System.out.println(YCKham);
                                System.out.println(KetLuan);
                                System.out.println(TToan);
                                System.out.println("Sucess");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Không tải được danh sách bác sĩ", "Error", JOptionPane.ERROR_MESSAGE);

                            // Debug
                            if (DEBUG == 1) {
                                System.out.println("Fail");
                            }
                        }
                        
                        YCKhamInput.setText(YCKham);
                        KLInput.setText(KetLuan);
                        
                        if (Integer.parseInt(TToan) == 1) {
                            PaidCheck.setSelected(true); 
                        }

                    } catch (SQLException se) {
                        // SQL Exception
                        System.out.println(se.getMessage());
                    }
                    
                    query = "SELECT SUM(THUPHI.THANHTIEN) AS TONGTIEN "
                                + "FROM KHAMBENH "
                                + "JOIN THUPHI "
                                + "ON KHAMBENH.MAKB = THUPHI.MAKB "
                                + "WHERE KHAMBENH.MABN = ? "
                                + "AND KHAMBENH.NGAYKHAM = ? "
                                + "AND KHAMBENH.YEUCAUKHAM = ? "
                                + "AND KHAMBENH.KETLUAN = ? "
                                + "GROUP BY KHAMBENH.MABN, KHAMBENH.NGAYKHAM";
                    // Catching error in query execution
                    try {
                        // Load parameter in to query
                        PreparedStatement ps = con.prepareStatement(query);
                        ps.setString(1, MaBN);
                        ps.setString(2, NgKham);
                        ps.setString(3, YCKham);
                        ps.setString(4, KetLuan);

                        // Execute and return boolean value
                        rs = ps.executeQuery();

                        if (rs.next()) {
                            TongTien = Integer.parseInt(rs.getString("TONGTIEN"));

                            // Debug
                            if (DEBUG == 1) {
                                System.out.println(TongTien);
                                System.out.println("Sucess");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Không tải được tổng tiền", "Error", JOptionPane.ERROR_MESSAGE);

                            // Debug
                            if (DEBUG == 1) {
                                System.out.println("Fail");
                            }
                        }
                        
                        YCKhamInput.setText(YCKham);
                        KLInput.setText(KetLuan);
                        TongTienInput.setText(TongTien.toString());
                        
                        if (Integer.parseInt(TToan) == 1) {
                            PaidCheck.setSelected(true); 
                            ThanhToanButton.setEnabled(false);
                        }
                    } catch (SQLException se) {
                        // SQL Exception
                        System.out.println(se.getMessage());
                    }
                    
                    query = "SELECT DICHVU.TENDV, THUPHI.SOLUONG, THUPHI.THANHTIEN " 
                            + "FROM THUPHI " 
                            + "JOIN DICHVU " 
                            + "ON THUPHI.MADV = DICHVU.MADV " 
                            + "JOIN KHAMBENH " 
                            + "ON THUPHI.MAKB = KHAMBENH.MAKB " 
                            + "WHERE KHAMBENH.MABN = ? " 
                            + "AND KHAMBENH.NGAYKHAM = ? " 
                            + "AND KHAMBENH.YEUCAUKHAM = ? " 
                            + "AND KHAMBENH.KETLUAN = ? ";
                    // Catching error in query execution
                    try {
                        // Load parameter in to query
                        PreparedStatement ps = con.prepareStatement(query);
                        ps.setString(1, MaBN);
                        ps.setString(2, NgKham);
                        ps.setString(3, YCKham);
                        ps.setString(4, KetLuan);

                        // Execute and return boolean value
                        rs = ps.executeQuery();
                        
                        ((DefaultTableModel) DSDVDKTable.getModel()).setRowCount(0);
                        
                        int columnCount = rs.getMetaData().getColumnCount();
                        
                        if (((DefaultTableModel) DSDVDKTable.getModel()).getColumnCount() != columnCount) {
                            ((DefaultTableModel) DSDVDKTable.getModel()).setRowCount(0);
                            for (int i = 1; i <= columnCount; i++) {
                                ((DefaultTableModel) DSDVDKTable.getModel()).addColumn(rs.getMetaData().getColumnName(i));
                            }
                        }
                        
                        while (rs.next()) {
                            Object[] row = new Object[columnCount];
                            for (int i = 1; i <= columnCount; i++) {
                                row[i - 1] = rs.getObject(i); //Lấy giá trị từ cột i.
                            }
                            ((DefaultTableModel) DSDVDKTable.getModel()).addRow(row);
                        }
                        con.close();
                    } catch (SQLException se) {
                        // SQL Exception
                        System.out.println(se.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Ngày khám chưa được chọn", "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println("Ngày khám chưa được chọn.");
            }
            
        }
    }//GEN-LAST:event_NgKhamInputPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DSDVDKTable;
    private javax.swing.JTextField KLInput;
    private javax.swing.JPanel LowerPanel;
    private javax.swing.JTextField MaBNInput;
    private javax.swing.JPanel MiddlePanel;
    private com.toedter.calendar.JDateChooser NgKhamInput;
    private javax.swing.JCheckBox PaidCheck;
    private javax.swing.JTextField TenBNInput;
    private javax.swing.JButton ThanhToanButton;
    private javax.swing.JTextField TongTienInput;
    private javax.swing.JPanel UpperPanel;
    private javax.swing.JTextField YCKhamInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
