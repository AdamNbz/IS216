/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package userview;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.FlatIntelliJLaf;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import java.util.Random;
import javax.mail.*;
import javax.activation.*;
import javax.swing.JOptionPane;
import object.EmailUtil;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
/**
 *
 * @author shanghuang
 */
public class ForgotPasswordFrame extends javax.swing.JFrame {
    int DEBUG = 1;
    int sec = 120;
    long num = 0;
    public static AuthenticationFrame af;
    /**
     * Creates new form ForgotPasswordFrame
     */
    public ForgotPasswordFrame(AuthenticationFrame af) {
        this.af = af;
        FlatIntelliJLaf.setup();
		try {
			UIManager.setLookAndFeel( new FlatIntelliJLaf() );
		} catch( Exception ex ) {
			System.err.println( "Failed to initialize LaF" );
		}
		UIManager.put( "Button.arc", 50 );
		UIManager.put( "Component.arc", 50 );
		UIManager.put( "ProgressBar.arc", 50 );
		UIManager.put( "TextComponent.arc", 50 );
		UIManager.put( "TextArea.border", 50 );
		UIManager.put( "ScrollPane.TextComponent.arc", 50 );
        initComponents();
		FPF_IntermidiateContainer_JPanel.putClientProperty(FlatClientProperties.STYLE, "arc: 10" );
        this.setFrameInCenter();
        this.setVisible(true);
    }
    
    public void setFrameInCenter() {
        final Toolkit toolkit = Toolkit.getDefaultToolkit();
        final Dimension screenSize = toolkit.getScreenSize();
        final int x = (screenSize.width - this.getWidth()) / 2;
        final int y = (screenSize.height - this.getHeight()) / 2;
        this.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FPF_IntermidiateContainer_JPanel = new javax.swing.JPanel();
        FPF_NhapMaOTPTuEmail_JLabel = new javax.swing.JLabel();
        FPF_OTPInput_JTextField = new javax.swing.JTextField();
        FPF_OTPResend_JLabel = new javax.swing.JLabel();
        FPF_TimeCountBackward_JLabel = new javax.swing.JLabel();
        FPF_XacNhanOTP_JButton = new javax.swing.JButton();
        FPF_Separator_JSeparator = new javax.swing.JSeparator();
        FPF_NewPassword_JLabel = new javax.swing.JLabel();
        FPF_NewPasswordConfirm_JLabel = new javax.swing.JLabel();
        FPF_Finish_JButton = new javax.swing.JButton();
        FPF_Return_JButton = new javax.swing.JButton();
        FPF_Email_JLabel = new javax.swing.JLabel();
        FPF_Email_JTextField = new javax.swing.JTextField();
        FPF_Username_JLabel = new javax.swing.JLabel();
        FPF_Username_JTextField = new javax.swing.JTextField();
        FPF_OTP_JLabel = new javax.swing.JLabel();
        FPF_NewPassword_JPasswordField = new javax.swing.JPasswordField();
        FPF_NewPasswordConfirm_JPasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        FPF_NhapMaOTPTuEmail_JLabel.setFont(new java.awt.Font("SF Mono SemiBold", 0, 30)); // NOI18N
        FPF_NhapMaOTPTuEmail_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FPF_NhapMaOTPTuEmail_JLabel.setText("Nhập mã OTP từ Email đăng ký");

        FPF_OTPInput_JTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FPF_OTPInput_JTextField.setText("OTP");

        FPF_OTPResend_JLabel.setText("Chưa nhận được? Hãy điền lại và Enter!");

        FPF_TimeCountBackward_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FPF_TimeCountBackward_JLabel.setText("120s");

        FPF_XacNhanOTP_JButton.setText("Xác nhận");
        FPF_XacNhanOTP_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FPF_XacNhanOTP_JButtonActionPerformed(evt);
            }
        });

        FPF_NewPassword_JLabel.setText("Mật khẩu mới:");

        FPF_NewPasswordConfirm_JLabel.setText("Xác nhận mật khẩu mới:");

        FPF_Finish_JButton.setText("Hoàn tất");
        FPF_Finish_JButton.setEnabled(false);
        FPF_Finish_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FPF_Finish_JButtonActionPerformed(evt);
            }
        });

        FPF_Return_JButton.setText("Trở về");
        FPF_Return_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FPF_Return_JButtonActionPerformed(evt);
            }
        });

        FPF_Email_JLabel.setText("Email:");

        FPF_Email_JTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FPF_Email_JTextField.setText("Email");
        FPF_Email_JTextField.setEnabled(false);

        FPF_Username_JLabel.setText("Username:");

        FPF_Username_JTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FPF_Username_JTextField.setText("Username");
        FPF_Username_JTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FPF_Username_JTextFieldActionPerformed(evt);
            }
        });

        FPF_OTP_JLabel.setText("OTP:");

        FPF_NewPassword_JPasswordField.setEnabled(false);

        FPF_NewPasswordConfirm_JPasswordField.setEnabled(false);

        javax.swing.GroupLayout FPF_IntermidiateContainer_JPanelLayout = new javax.swing.GroupLayout(FPF_IntermidiateContainer_JPanel);
        FPF_IntermidiateContainer_JPanel.setLayout(FPF_IntermidiateContainer_JPanelLayout);
        FPF_IntermidiateContainer_JPanelLayout.setHorizontalGroup(
            FPF_IntermidiateContainer_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FPF_IntermidiateContainer_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FPF_IntermidiateContainer_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FPF_Separator_JSeparator)
                    .addComponent(FPF_NhapMaOTPTuEmail_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(FPF_NewPassword_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FPF_NewPasswordConfirm_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FPF_IntermidiateContainer_JPanelLayout.createSequentialGroup()
                        .addComponent(FPF_Return_JButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FPF_Finish_JButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FPF_IntermidiateContainer_JPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(FPF_XacNhanOTP_JButton))
                    .addComponent(FPF_Email_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FPF_Email_JTextField)
                    .addComponent(FPF_OTPInput_JTextField)
                    .addComponent(FPF_Username_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FPF_Username_JTextField)
                    .addComponent(FPF_OTP_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FPF_NewPassword_JPasswordField)
                    .addGroup(FPF_IntermidiateContainer_JPanelLayout.createSequentialGroup()
                        .addComponent(FPF_OTPResend_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FPF_TimeCountBackward_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(FPF_NewPasswordConfirm_JPasswordField))
                .addContainerGap())
        );
        FPF_IntermidiateContainer_JPanelLayout.setVerticalGroup(
            FPF_IntermidiateContainer_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FPF_IntermidiateContainer_JPanelLayout.createSequentialGroup()
                .addComponent(FPF_NhapMaOTPTuEmail_JLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_Username_JLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_Username_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_Email_JLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_Email_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_OTP_JLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_OTPInput_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FPF_IntermidiateContainer_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FPF_OTPResend_JLabel)
                    .addComponent(FPF_TimeCountBackward_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_XacNhanOTP_JButton)
                .addGap(18, 18, 18)
                .addComponent(FPF_Separator_JSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(FPF_NewPassword_JLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_NewPassword_JPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_NewPasswordConfirm_JLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FPF_NewPasswordConfirm_JPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(FPF_IntermidiateContainer_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FPF_Finish_JButton)
                    .addComponent(FPF_Return_JButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FPF_IntermidiateContainer_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FPF_IntermidiateContainer_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // connector for jdbc
    private Connection connect() {
        // connection parameter
        String dbURL = "jdbc:oracle:thin:@192.168.124.180:32772:xe";
        String driver = "oracle.jdbc.OracleDriver";
        Connection con = null;
        
        // catching error in connection
        try {
            // class loader
            Class.forName(driver);
            
            // connection
            con = DriverManager.getConnection(dbURL, "c##shanghuang", "181105");

            // debug block
            if (con != null) {
                if (DEBUG == 1) {
                    System.out.println("Kết nối đến cơ sử dữ liệu thành công");
                }
            }
        } catch(SQLException se) { 
            // sql exception
            System.out.println(se.getMessage());
        } catch (ClassNotFoundException ex) { 
            // class exception
            Logger.getLogger(ForgotPasswordFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Return connection
        if (con != null) {
            return con;
        } else {
            return null;
        }
    }
  
    private void FPF_XacNhanOTP_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FPF_XacNhanOTP_JButtonActionPerformed
        long OTPVariableHolder = Integer.parseInt(FPF_OTPInput_JTextField.getText());
        if (OTPVariableHolder == num) { 
            System.out.println("Trùng khớp OTP, tiếp tục!");
            FPF_NewPassword_JPasswordField.setEnabled(true);
            FPF_NewPasswordConfirm_JPasswordField.setEnabled(true);
            FPF_Finish_JButton.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Mã OTP không khớp. Vui lòng nhập lại", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_FPF_XacNhanOTP_JButtonActionPerformed

    private void FPF_Finish_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FPF_Finish_JButtonActionPerformed
        String NewPasswordVariableHolder = new String(FPF_NewPassword_JPasswordField.getPassword());
        String NewPasswordConfirmVariableHolder = new String(FPF_NewPasswordConfirm_JPasswordField.getPassword());
        String UsernameVariableHolder = FPF_Username_JTextField.getText();
        String EmailVariableHolder = FPF_Email_JTextField.getText();
        
        if (NewPasswordVariableHolder.contentEquals(NewPasswordConfirmVariableHolder)) {
            Connection con = connect();
            if (con == null) {
                // debug block
                if (DEBUG == 1) {
                    System.out.println("Không thể kết nối đến cơ sử dữ liệu");
                }
            } else {
                String query = "UPDATE CANHAN SET CANHAN.MATKHAU = ? WHERE CANHAN.USERNAME = ? AND CANHAN.EMAIL = ?";
                boolean flag = false;
                // Catching error in query execution
                try {
                    // Load parameter in to query
                    PreparedStatement ps = con.prepareStatement(query);
                    ps.setString(1, NewPasswordVariableHolder);
                    ps.setString(2, UsernameVariableHolder);
                    ps.setString(3, EmailVariableHolder);

                    // Execute and return boolean value
                    ps.executeUpdate();
                    flag = true;
                } catch (SQLException se) {
                    // SQL Exception
                    System.out.println(se.getMessage());
                }
                // checking connection confirm
                if (flag == false) {
                    // error display
                    JOptionPane.showMessageDialog(this, "Lỗi cập nhật mật khẩu mới. Vui lòng thử lại!", "Error", JOptionPane.ERROR_MESSAGE);

                    // debug block
                    if (DEBUG == 1) {
                        System.out.println("userview.ForgotPasswordFrame.FPF_Finish_JButtonActionPerformed(): Error on update query");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Cập nhật thành công", "Success", JOptionPane.INFORMATION_MESSAGE);
                    // debug block
                    if (DEBUG == 1) {
                        System.out.println("userview.ForgotPasswordFrame.FPF_Finish_JButtonActionPerformed(): Update query success");
                    }
                    this.af.setVisible(true);
                    this.dispose();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Mật khẩu và xác nhận mật khẩu không khớp. Vui lòng nhập lại", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_FPF_Finish_JButtonActionPerformed

    private void FPF_Username_JTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FPF_Username_JTextFieldActionPerformed
        String UsernameVariableHolder = FPF_Username_JTextField.getText();
        String EmailVariableHolder = null;
        if (UsernameVariableHolder == null) {
            JOptionPane.showMessageDialog(this, "Username không được để trống!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Connection con = connect();
            
            if (con == null) {
                // debug block
                if (DEBUG == 1) {
                    System.out.println("Không thể kết nối đến cơ sử dữ liệu");
                }
            } else {
                // query parameter
                boolean result = false;
                ResultSet rs = null;
                String query = "SELECT CANHAN.USERNAME,CANHAN.EMAIL FROM CANHAN WHERE CANHAN.USERNAME = ?";

                // catching error in query execution
                try {
                    // load parameter in to query
                    PreparedStatement ps = con.prepareStatement(query);
                    ps.setString(1, UsernameVariableHolder);

                    // execute and return boolean value to confirm connection
                    rs = ps.executeQuery();
                    
                    
                    // do not touch this shitty block of code or u will be curse for eternity
                    if (rs.next()) {
                        do {
                            EmailVariableHolder = rs.getString("EMAIL");
                        } while(rs.next());
                        
                        // Debug
                        if (DEBUG == 1) {
                            System.out.println("Sucess retrieve Email");
                        }
                    }
                    FPF_Email_JTextField.setText(EmailVariableHolder); 
                    result = true;
                    con.close();
                } catch (SQLException se) {
                    // SQL Exception
                    System.out.println(se.getMessage());
                }

                // checking connection confirm
                if (result == false) {
                    // error display
                    JOptionPane.showMessageDialog(this, "Không tìm thấy thông tin. Vui lòng kiểm tra lại.", "Error", JOptionPane.ERROR_MESSAGE);

                    // debug block
                    if (DEBUG == 1) {
                        System.out.println("userview.ForgotPasswordFrame.FPF_Username_JTextFieldActionPerformed(): No user and Email found");
                        System.out.println(EmailVariableHolder);
                    }
                } else {

                    // debug block
                    if (DEBUG == 1) {
                        System.out.println("userview.ForgotPasswordFrame.FPF_Username_JTextFieldActionPerformed(): User and Email found");
                    }
                }
            }
            
        }
        
        FPF_TimeCountBackward_JLabel.setText("120"); 
        FPF_XacNhanOTP_JButton.setEnabled(true);

        EmailVariableHolder = FPF_Email_JTextField.getText();
        if (EmailVariableHolder == null) {
            JOptionPane.showMessageDialog(this, "Email không được bỏ trống");
        } else {
            final String fromEmail = "macsin233@gmail.com"; //requires valid gmail id
            final String password = "aoju pnox huds fhga "; // correct password for gmail id

            System.out.println("TLSEmail Start");
            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com"); //SMTP Host
            props.put("mail.smtp.port", "587"); //TLS Port
            props.put("mail.smtp.auth", "true"); //enable authentication
            props.put("mail.smtp.starttls.enable", "true"); //enable STARTTLS

            //create Authenticator object to pass in Session.getInstance argument
            Authenticator auth = new Authenticator() {
                    //override the getPasswordAuthentication method
                    protected PasswordAuthentication getPasswordAuthentication() {
                            return new PasswordAuthentication(fromEmail, password);
                    }
            };
            Session session = Session.getInstance(props, auth);

            Random rand = new Random();
            num = 100000 + rand.nextInt(900000);

            EmailUtil.sendEmail(session, EmailVariableHolder,"Mã OTP quên mật khẩu", "Mã OTP là " + String.valueOf(num));

            JOptionPane.showMessageDialog(this, "Đã gửi mã OTP đến Email đăng ký, vui lòng kiểm tra!", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadTimer();
        }
    }//GEN-LAST:event_FPF_Username_JTextFieldActionPerformed

    private void FPF_Return_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FPF_Return_JButtonActionPerformed
        this.af.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_FPF_Return_JButtonActionPerformed

    private void loadTimer() {
        Timer tmr = new Timer();
        tmr.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                sec--; // Giảm số giây

                // Kiểm tra nếu thời gian về 0
                if (sec < 0) {
                    sec = 0; // Reset về 120 giây
                    FPF_XacNhanOTP_JButton.setEnabled(false);
                }

                // Cập nhật JLabel với thời gian mới
                SwingUtilities.invokeLater(() -> {
                    FPF_TimeCountBackward_JLabel.setText(String.valueOf(sec));
                });
            }
        }, 0, 1000);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ForgotPasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ForgotPasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ForgotPasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ForgotPasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ForgotPasswordFrame(af).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FPF_Email_JLabel;
    private javax.swing.JTextField FPF_Email_JTextField;
    private javax.swing.JButton FPF_Finish_JButton;
    private javax.swing.JPanel FPF_IntermidiateContainer_JPanel;
    private javax.swing.JLabel FPF_NewPasswordConfirm_JLabel;
    private javax.swing.JPasswordField FPF_NewPasswordConfirm_JPasswordField;
    private javax.swing.JLabel FPF_NewPassword_JLabel;
    private javax.swing.JPasswordField FPF_NewPassword_JPasswordField;
    private javax.swing.JLabel FPF_NhapMaOTPTuEmail_JLabel;
    private javax.swing.JTextField FPF_OTPInput_JTextField;
    private javax.swing.JLabel FPF_OTPResend_JLabel;
    private javax.swing.JLabel FPF_OTP_JLabel;
    private javax.swing.JButton FPF_Return_JButton;
    private javax.swing.JSeparator FPF_Separator_JSeparator;
    private javax.swing.JLabel FPF_TimeCountBackward_JLabel;
    private javax.swing.JLabel FPF_Username_JLabel;
    private javax.swing.JTextField FPF_Username_JTextField;
    private javax.swing.JButton FPF_XacNhanOTP_JButton;
    // End of variables declaration//GEN-END:variables
}
